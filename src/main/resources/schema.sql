-- Создание таблицы mpa_rating
CREATE TABLE IF NOT EXISTS mpa_rating
(
    id          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(10),
    description VARCHAR(100)
);

-- Создание таблицы genres
CREATE TABLE IF NOT EXISTS genres
(
    genre_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     VARCHAR NOT NULL
);

-- Создание таблицы users
CREATE TABLE IF NOT EXISTS users
(
    id       INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR NOT NULL,
    login    VARCHAR NOT NULL,
    name     VARCHAR,
    birthday DATE,
    CONSTRAINT valid_email CHECK (email LIKE '%@%.%'),
    CONSTRAINT valid_login CHECK (login LIKE '%'),
    CONSTRAINT valid_birthday CHECK (birthday <= CURRENT_DATE)
);

-- Создание таблицы films
CREATE TABLE IF NOT EXISTS films
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          VARCHAR(100) NOT NULL,
    description   VARCHAR(200),
    release_date  DATE,
    duration      INT          NOT NULL,
    mpa_rating_id INT REFERENCES mpa_rating (id),
    CONSTRAINT valid_release_date CHECK (release_date >= '1950-12-28'), -- дата первого фильма в истории
    CONSTRAINT valid_duration CHECK (duration > 0)
);

-- Создание таблицы film_genres
CREATE TABLE IF NOT EXISTS film_genres
(
    film_id  BIGINT REFERENCES films (id) ON DELETE CASCADE,
    genre_id INT REFERENCES genres (genre_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);

-- Создание таблицы user_friends
CREATE TABLE IF NOT EXISTS user_friends
(
    user_id   BIGINT REFERENCES users (id) ON DELETE CASCADE,
    friend_id BIGINT REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, friend_id),
    CONSTRAINT no_self_friendship CHECK (user_id <> friend_id)
);

-- Создание таблицы film_likes
CREATE TABLE IF NOT EXISTS film_likes
(
    user_id BIGINT REFERENCES users (id) ON DELETE CASCADE,
    film_id BIGINT REFERENCES films (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS reviews
(
    review_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     TEXT              NOT NULL,
    is_positive BOOLEAN           NOT NULL,
    user_id     BIGINT            NOT NULL,
    film_id     BIGINT            NOT NULL,
    useful      INTEGER DEFAULT 0 NOT NULL,
    CONSTRAINT fk_reviews_user FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_reviews_film FOREIGN KEY (film_id) REFERENCES films (id)
);

CREATE TABLE IF NOT EXISTS review_ratings
(
    review_id BIGINT  NOT NULL,
    user_id   BIGINT  NOT NULL,
    is_like   BOOLEAN NOT NULL,
    PRIMARY KEY (review_id, user_id)
);

CREATE TABLE IF NOT EXISTS user_feed (
    event_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    timestamp BIGINT NOT NULL,
    user_id INT NOT NULL,
    event_type VARCHAR(10) NOT NULL,
    operation VARCHAR(10) NOT NULL,
    entity_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);